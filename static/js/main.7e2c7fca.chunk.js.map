{"version":3,"sources":["components/NavBar.tsx","components/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavBar","className","href","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNAoDeA,E,uKAjDX,OACE,kBAAC,WAAD,KACE,wBAAIC,UAAU,sBAAd,qBACA,wBAAIA,UAAU,2BACZ,wBAAIA,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,YAIF,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,WAIF,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,cAIF,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,cAIF,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,eAIF,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,cAIF,wBAAID,UAAU,yBACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,aAIF,wBAAID,UAAU,OACZ,uBAAGA,UAAU,sCAAsCC,KAAK,MAAxD,uB,GA1CSC,aCQNC,E,uKANX,OACE,8C,GAHaD,aCgBJE,MAbf,WACE,OACE,yBAAKJ,UAAU,qBACb,yBAAKA,UAAU,+DACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,0DACb,kBAAC,EAAD,S,MCCYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7e2c7fca.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react'\nclass NavBar extends Component {\n  render() {\n    return (\n      <Fragment>\n        <h1 className=\"f4 bold center mw6\">Marie-anne Mawhin</h1>\n        <ul className=\"list pl0 ml0 center mw6\">\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Contact\n            </a>\n          </li>\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Skills\n            </a>\n          </li>\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Languages\n            </a>\n          </li>\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Interests\n            </a>\n          </li>\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Experience\n            </a>\n          </li>\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Education\n            </a>\n          </li>\n          <li className=\"pv3 bb b--washed-blue\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Projects\n            </a>\n          </li>\n          <li className=\"pv3\">\n            <a className=\"f5 fw5 link dim washed-blue bg-navy\" href=\"#0\">\n              Achievements\n            </a>\n          </li>\n        </ul>\n      </Fragment>\n    )\n  }\n}\nexport default NavBar\n","import React, { Component } from 'react'\nclass Main extends Component {\n  render() {\n    return (\n      <p>Hello World</p>\n    )\n  }\n}\n\nexport default Main\n","import React from 'react'\nimport NavBar from './components/NavBar'\nimport Main from './components/Main'\n\nfunction App() {\n  return (\n    <div className=\"App vh-100 avenir\">\n      <div className=\"fl w-third w-30-m w-20-l h-100 pa3 bg-navy washed-blue o-80\">\n        <NavBar />\n      </div>\n      <div className=\"fl w-two-thirds w-70-m w-80-l pa3 h-100 bg-washed-blue\">\n        <Main />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'tachyons'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}